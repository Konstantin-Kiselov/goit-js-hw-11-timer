{"version":3,"sources":["index.js"],"names":["refs","days","document","querySelector","hours","mins","secs","CountdownTimer","constructor","selector","targetDate","showDate","intervalId","start","setInterval","startTime","Date","now","deltaTime","time","getTimeComponents","stop","clearInterval","pad","Math","floor","value","String","padStart","updateClockFace","textContent","timer","console","log"],"mappings":";;;AAsFA,aAtFA,QAAA,oBAEA,MAAMA,EAAO,CACXC,KAAMC,SAASC,cAAc,uBAC7BC,MAAOF,SAASC,cAAc,wBAC9BE,KAAMH,SAASC,cAAc,uBAC7BG,KAAMJ,SAASC,cAAc,wBAG/B,MAAMI,EACJC,aAAY,SAAEC,EAAF,WAAYC,EAAZ,SAAwBC,IAC7BC,KAAAA,WAAa,KACbH,KAAAA,SAAWA,EACXC,KAAAA,WAAaA,EACbC,KAAAA,SAAWA,EAEXE,KAAAA,QAGPA,QACOD,KAAAA,WAAaE,YAAY,KACtBC,MAAAA,EAAYC,KAAKC,MACjBC,EAAY,KAAKR,WAAaK,EAC9BI,EAAO,KAAKC,kBAAkBF,GAE/BP,KAAAA,SAASQ,IAGb,KAGLE,OACEC,cAAc,KAAKV,YAIrBQ,kBAAkBD,GA0BT,MAAA,CAAElB,KArBI,KAAKsB,IAAIC,KAAKC,MAAMN,EAAQ,QAqB1Bf,MAdD,KAAKmB,IAAIC,KAAKC,MAAON,EAAQ,MAAyB,OAc9Cd,KART,KAAKkB,IAAIC,KAAKC,MAAON,EAAQ,KAAoB,MAQlCb,KAFf,KAAKiB,IAAIC,KAAKC,MAAON,EAAQ,IAAc,OAM1DI,IAAIG,GACKC,OAAAA,OAAOD,GAAOE,SAAS,EAAG,MAKrC,SAASC,GAAgB,KAAE5B,EAAF,MAAQG,EAAR,KAAeC,EAAf,KAAqBC,IAC5CN,EAAKC,KAAK6B,YAAc7B,EACxBD,EAAKI,MAAM0B,YAAc1B,EACzBJ,EAAKK,KAAKyB,YAAczB,EACxBL,EAAKM,KAAKwB,YAAcxB,EAI1B,MAAMyB,EAAQ,IAAIxB,EAAe,CAC/BE,SAAU,WACVC,WAAY,IAAIM,KAAK,yBACrBL,SAAUkB,IAGZG,QAAQC,IAAIF","file":"src.1e22ec6e.js","sourceRoot":"../src","sourcesContent":["import './sass/main.scss';\n\nconst refs = {\n  days: document.querySelector('[data-value=\"days\"]'),\n  hours: document.querySelector('[data-value=\"hours\"]'),\n  mins: document.querySelector('[data-value=\"mins\"]'),\n  secs: document.querySelector('[data-value=\"secs\"]'),\n};\n\nclass CountdownTimer {\n  constructor({ selector, targetDate, showDate }) {\n    this.intervalId = null;\n    this.selector = selector;\n    this.targetDate = targetDate;\n    this.showDate = showDate;\n\n    this.start();\n  }\n\n  start() {\n    this.intervalId = setInterval(() => {\n      const startTime = Date.now();\n      const deltaTime = this.targetDate - startTime;\n      const time = this.getTimeComponents(deltaTime);\n\n      this.showDate(time);\n      // console.log(timeComponents);\n      // console.log(`${time.days}:${time.hours}:${time.mins}:${time.secs}`);\n    }, 1000);\n  }\n\n  stop() {\n    clearInterval(this.intervalId);\n  }\n\n  /* Формулы для получения значений с миллисекунд в дни:часы:минуты:секунды */\n  getTimeComponents(time) {\n    /*\n     * Оставшиеся дни: делим значение UTC на 1000 * 60 * 60 * 24, количество\n     * миллисекунд в одном дне (миллисекунды * секунды * минуты * часы)\n     */\n    const days = this.pad(Math.floor(time / (1000 * 60 * 60 * 24)));\n\n    /*\n     * Оставшиеся часы: получаем остаток от предыдущего расчета с помощью оператора\n     * остатка % и делим его на количество миллисекунд в одном часе\n     * (1000 * 60 * 60 = миллисекунды * минуты * секунды)\n     */\n    const hours = this.pad(Math.floor((time % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60)));\n\n    /*\n     * Оставшиеся минуты: получаем оставшиеся минуты и делим их на количество\n     * миллисекунд в одной минуте (1000 * 60 = миллисекунды * секунды)\n     */\n    const mins = this.pad(Math.floor((time % (1000 * 60 * 60)) / (1000 * 60)));\n\n    /*\n     * Оставшиеся секунды: получаем оставшиеся секунды и делим их на количество\n     * миллисекунд в одной секунде (1000)\n     */\n    const secs = this.pad(Math.floor((time % (1000 * 60)) / 1000));\n\n    return { days, hours, mins, secs };\n  }\n\n  /* Принимает число, приводит к строке и добавляет 0, если число меньше 2-х знаков*/\n  pad(value) {\n    return String(value).padStart(2, '0');\n  }\n}\n\n/* Обновляем данные в index.html { days, hours, mins, secs } */\nfunction updateClockFace({ days, hours, mins, secs }) {\n  refs.days.textContent = days;\n  refs.hours.textContent = hours;\n  refs.mins.textContent = mins;\n  refs.secs.textContent = secs;\n}\n\n/* Создаем экземпляр класса CountdownTimer */\nconst timer = new CountdownTimer({\n  selector: '#timer-1',\n  targetDate: new Date('Dec 31, 2021 23:59:59'),\n  showDate: updateClockFace,\n});\n\nconsole.log(timer);\n"]}